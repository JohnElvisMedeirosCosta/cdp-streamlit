# ui/audience.py
"""
Interface para gerenciamento de audi√™ncias
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import time
from datetime import datetime, date, timedelta
from typing import Dict, Any

from core.cdp import CustomerDataPlatform
from services.audience_service import AudienceService
from models.audience import AudienceCriteria
from config import DATA_SOURCES
from utils.ui_helpers import (
    force_refresh_with_message, 
    handle_operation_with_refresh,
    confirm_action,
    auto_refresh_data,
    mark_for_refresh,
    batch_operation_progress
)

def show_audience_management(cdp: CustomerDataPlatform):
    """Exibe o sistema de gerenciamento de audi√™ncias"""
    st.header("üéØ Gerenciamento de Audi√™ncias")
    
    # Inicializar servi√ßo de audi√™ncias
    if 'audience_service' not in st.session_state:
        st.session_state.audience_service = AudienceService(cdp)
    
    audience_service = st.session_state.audience_service
    
    # Sistema autom√°tico de refresh
    auto_refresh_data("audiences")
    
    # Tabs para organizar funcionalidades
    tab1, tab2, tab3, tab4 = st.tabs(["üìã Minhas Audi√™ncias", "‚ûï Criar Audi√™ncia", "üìä Estat√≠sticas", "üîß Ferramentas"])
    
    with tab1:
        show_audience_list(audience_service)
    
    with tab2:
        show_create_audience(audience_service)
    
    with tab3:
        show_audience_statistics(audience_service)
    
    with tab4:
        show_audience_tools(audience_service)

def show_audience_list(audience_service: AudienceService):
    """Exibe lista de audi√™ncias criadas"""
    st.subheader("üìã Suas Audi√™ncias")
    
    audiences = audience_service.get_all_audiences()
    
    if not audiences:
        st.info("Nenhuma audi√™ncia criada ainda. Use a aba 'Criar Audi√™ncia' para come√ßar.")
        return
    
    # Estat√≠sticas r√°pidas
    total_customers_in_audiences = sum(aud.customer_count for aud in audiences)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Audi√™ncias", len(audiences))
    with col2:
        st.metric("Total de Clientes", total_customers_in_audiences)
    with col3:
        avg_size = total_customers_in_audiences / len(audiences) if audiences else 0
        st.metric("Tamanho M√©dio", f"{avg_size:.0f}")
    
    # Lista de audi√™ncias
    for audience in audiences:
        with st.expander(f"üéØ {audience.name} ({audience.customer_count} clientes)"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write(f"**Descri√ß√£o:** {audience.description}")
                st.write(f"**Criada em:** {audience.created_at[:10]}")
                st.write(f"**√öltima atualiza√ß√£o:** {audience.updated_at[:10]}")
                if audience.last_extracted_at:
                    st.write(f"**√öltima extra√ß√£o:** {audience.last_extracted_at[:10]}")
                
                # Mostrar crit√©rios resumidos
                criteria_summary = _get_criteria_summary(audience.criteria)
                if criteria_summary:
                    st.write("**Crit√©rios:**")
                    for criterion in criteria_summary:
                        st.write(f"- {criterion}")
            
            with col2:
                # Bot√µes de a√ß√£o
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    if st.button(f"üì§ Extrair", key=f"extract_{audience.id}"):
                        with st.spinner("Extraindo audi√™ncia..."):
                            result = audience_service.extract_audience_customers(audience.id)
                            if result:
                                st.success(f"‚úÖ {result.total_customers} clientes extra√≠dos!")
                                st.download_button(
                                    label="üíæ Baixar CSV",
                                    data=result.csv_data,
                                    file_name=f"audiencia_{audience.name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                    mime="text/csv",
                                    key=f"download_{audience.id}"
                                )
                            else:
                                st.error("Erro ao extrair audi√™ncia")
                
                with col_btn2:
                    if st.button(f"üîÑ Atualizar", key=f"refresh_{audience.id}"):
                        if audience_service.refresh_audience_count(audience.id):
                            st.success("Contagem atualizada!")
                            st.rerun()
                        else:
                            st.error("Erro ao atualizar")
                
                # Bot√£o de exclus√£o
                if st.button(f"üóëÔ∏è Excluir", key=f"delete_{audience.id}", type="secondary"):
                    if confirm_action("excluir", audience.name, f"delete_audience_{audience.id}"):
                        def delete_operation():
                            return audience_service.delete_audience(audience.id)
                        
                        if handle_operation_with_refresh(
                            operation=delete_operation,
                            success_message="Audi√™ncia exclu√≠da!",
                            error_message="Erro ao excluir audi√™ncia",
                            spinner_message="Excluindo audi√™ncia..."
                        ):
                            mark_for_refresh("audiences")

def show_create_audience(audience_service: AudienceService):
    """Exibe formul√°rio para criar nova audi√™ncia"""
    st.subheader("‚ûï Criar Nova Audi√™ncia")
    
    with st.form("create_audience_form"):
        # Informa√ß√µes b√°sicas
        st.write("### üìù Informa√ß√µes B√°sicas")
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("Nome da Audi√™ncia*", placeholder="Ex: Clientes Premium SP")
        with col2:
            created_by = st.text_input("Criado por", value="usu√°rio", placeholder="Seu nome/ID")
        
        description = st.text_area("Descri√ß√£o", placeholder="Descreva o objetivo desta audi√™ncia...")
        
        # Crit√©rios de segmenta√ß√£o
        st.write("### üéØ Crit√©rios de Segmenta√ß√£o")
        
        # Crit√©rios b√°sicos
        with st.expander("üë§ Dados Pessoais", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                nome_contains = st.text_input("Nome cont√©m")
                email_contains = st.text_input("Email cont√©m")
                documento_equals = st.text_input("Documento exato")
            with col2:
                telefone_contains = st.text_input("Telefone cont√©m")
                profissao_contains = st.text_input("Profiss√£o cont√©m")
        
        # Crit√©rios geogr√°ficos
        with st.expander("üìç Localiza√ß√£o"):
            col1, col2, col3 = st.columns(3)
            with col1:
                cidade_equals = st.text_input("Cidade")
            with col2:
                estado_equals = st.text_input("Estado")
            with col3:
                cep_starts_with = st.text_input("CEP inicia com")
        
        # Crit√©rios de data
        with st.expander("üìÖ Datas"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.write("**Data de Nascimento**")
                data_nascimento_from = st.date_input("De", value=None, key="birth_from")
                data_nascimento_to = st.date_input("At√©", value=None, key="birth_to")
            with col2:
                st.write("**Aniversariantes**")
                meses = {
                    0: "Todos os meses",
                    1: "Janeiro", 2: "Fevereiro", 3: "Mar√ßo", 4: "Abril",
                    5: "Maio", 6: "Junho", 7: "Julho", 8: "Agosto",
                    9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
                }
                mes_selecionado = st.selectbox(
                    "M√™s de anivers√°rio",
                    options=list(meses.keys()),
                    format_func=lambda x: meses[x],
                    help="Selecione um m√™s para filtrar aniversariantes"
                )
                aniversariantes_mes = mes_selecionado if mes_selecionado > 0 else None
            with col3:
                st.write("**Data de Cadastro**")
                created_from = st.date_input("De", value=None, key="created_from")
                created_to = st.date_input("At√©", value=None, key="created_to")
        
        # Crit√©rios de qualidade
        with st.expander("‚≠ê Qualidade dos Dados"):
            col1, col2 = st.columns(2)
            with col1:
                confidence_min = st.slider("Score m√≠nimo de confian√ßa", 0.0, 1.0, 0.0, 0.1)
                confidence_max = st.slider("Score m√°ximo de confian√ßa", 0.0, 1.0, 1.0, 0.1)
            with col2:
                has_email = st.selectbox("Tem email?", [None, True, False], format_func=lambda x: "Qualquer" if x is None else ("Sim" if x else "N√£o"))
                has_telefone = st.selectbox("Tem telefone?", [None, True, False], format_func=lambda x: "Qualquer" if x is None else ("Sim" if x else "N√£o"))
                has_endereco = st.selectbox("Tem endere√ßo?", [None, True, False], format_func=lambda x: "Qualquer" if x is None else ("Sim" if x else "N√£o"))
        
        # Crit√©rios de fonte
        with st.expander("üîó Fontes de Dados"):
            col1, col2 = st.columns(2)
            with col1:
                sources_include = st.multiselect("Incluir fontes", DATA_SOURCES)
            with col2:
                sources_exclude = st.multiselect("Excluir fontes", DATA_SOURCES)
        
        # Crit√©rios avan√ßados
        with st.expander("üîß Crit√©rios Avan√ßados"):
            col1, col2 = st.columns(2)
            with col1:
                has_history = st.selectbox("Tem hist√≥rico?", [None, True, False], format_func=lambda x: "Qualquer" if x is None else ("Sim" if x else "N√£o"))
            with col2:
                updated_in_last_days = st.number_input("Atualizado nos √∫ltimos X dias", min_value=0, value=0, help="0 = ignorar este crit√©rio")
        
        # Bot√µes
        col1, col2, col3 = st.columns(3)
        
        with col1:
            preview_button = st.form_submit_button("üëÄ Preview", type="secondary")
        with col2:
            create_button = st.form_submit_button("‚úÖ Criar Audi√™ncia", type="primary")
        with col3:
            clear_button = st.form_submit_button("üßπ Limpar")
        
        if clear_button:
            st.rerun()
        
        if preview_button or create_button:
            # Criar objeto de crit√©rios
            criteria = AudienceCriteria(
                nome_contains=nome_contains if nome_contains else None,
                email_contains=email_contains if email_contains else None,
                documento_equals=documento_equals if documento_equals else None,
                telefone_contains=telefone_contains if telefone_contains else None,
                cidade_equals=cidade_equals if cidade_equals else None,
                estado_equals=estado_equals if estado_equals else None,
                cep_starts_with=cep_starts_with if cep_starts_with else None,
                profissao_contains=profissao_contains if profissao_contains else None,
                data_nascimento_from=str(data_nascimento_from) if data_nascimento_from else None,
                data_nascimento_to=str(data_nascimento_to) if data_nascimento_to else None,
                aniversariantes_mes=aniversariantes_mes,
                created_from=str(created_from) if created_from else None,
                created_to=str(created_to) if created_to else None,
                confidence_score_min=confidence_min if confidence_min > 0 else None,
                confidence_score_max=confidence_max if confidence_max < 1 else None,
                has_email=has_email,
                has_telefone=has_telefone,
                has_endereco=has_endereco,
                sources_include=sources_include if sources_include else None,
                sources_exclude=sources_exclude if sources_exclude else None,
                has_history=has_history,
                updated_in_last_days=updated_in_last_days if updated_in_last_days > 0 else None
            )
            
            if criteria.is_empty():
                st.error("‚ùå Defina pelo menos um crit√©rio para a audi√™ncia!")
                return
            
            if preview_button:
                # Mostrar preview
                with st.spinner("Gerando preview..."):
                    preview_customers = audience_service.get_audience_preview(criteria, limit=10)
                    total_count = audience_service._count_customers_by_criteria(criteria)
                
                st.success(f"‚úÖ {total_count} clientes encontrados")
                
                if preview_customers:
                    st.write("**Preview dos primeiros 10 clientes:**")
                    preview_data = []
                    for customer in preview_customers:
                        preview_data.append({
                            'Nome': customer.data.nome or 'N/A',
                            'Email': customer.data.email or 'N/A',
                            'Cidade': customer.data.cidade or 'N/A',
                            'Estado': customer.data.estado or 'N/A',
                            'Confian√ßa': f"{customer.confidence_score:.2f}"
                        })
                    
                    df = pd.DataFrame(preview_data)
                    st.dataframe(df, use_container_width=True)
                else:
                    st.info("Nenhum cliente encontrado com estes crit√©rios.")
            
            elif create_button:
                if not name:
                    st.error("‚ùå Nome da audi√™ncia √© obrigat√≥rio!")
                    return
                
                # Criar audi√™ncia
                with st.spinner("Criando audi√™ncia..."):
                    try:
                        audience_id = audience_service.create_audience(
                            name=name,
                            description=description,
                            criteria=criteria,
                            created_by=created_by
                        )
                        
                        # Criar audi√™ncia
                        def create_operation():
                            return audience_service.create_audience(
                                name=name,
                                description=description,
                                criteria=criteria,
                                created_by=created_by
                            )
                        
                        with st.spinner("Criando audi√™ncia..."):
                            try:
                                audience_id = create_operation()
                                
                                # Mostrar informa√ß√µes da audi√™ncia criada
                                audience = audience_service.get_audience(audience_id)
                                if audience:
                                    st.info(f"üìä {audience.customer_count} clientes inclu√≠dos na audi√™ncia")
                                
                                # Marcar para refresh e fazer rerun
                                mark_for_refresh("audiences")
                                force_refresh_with_message(f"‚úÖ Audi√™ncia '{name}' criada com sucesso!", delay=1.0)
                                st.balloons()
                                
                            except Exception as e:
                                st.error(f"‚ùå Erro ao criar audi√™ncia: {str(e)}")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao criar audi√™ncia: {str(e)}")
        # Verificar se precisa limpar o formul√°rio ap√≥s rerun
        if st.session_state.get('audience_created'):
            st.session_state.audience_created = False
            # For√ßar rerun para limpar formul√°rio
            st.rerun()

def show_audience_statistics(audience_service: AudienceService):
    """Exibe estat√≠sticas das audi√™ncias"""
    st.subheader("üìä Estat√≠sticas de Audi√™ncias")
    
    # Obter dados
    audiences = audience_service.get_all_audiences()
    stats = audience_service.get_audience_statistics()
    
    if not audiences:
        st.info("Nenhuma audi√™ncia criada para an√°lise.")
        return
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Audi√™ncias", stats['total_audiences'])
    with col2:
        st.metric("Com Extra√ß√µes", stats['audiences_with_extractions'])
    with col3:
        st.metric("Maior Audi√™ncia", stats['largest_audience_size'])
    with col4:
        extracted_rate = (stats['audiences_with_extractions'] / stats['total_audiences'] * 100) if stats['total_audiences'] > 0 else 0
        st.metric("Taxa de Uso", f"{extracted_rate:.1f}%")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribui√ß√£o de tamanhos de audi√™ncia
        sizes = [aud.customer_count for aud in audiences]
        names = [aud.name for aud in audiences]
        
        fig = px.bar(
            x=names,
            y=sizes,
            title="Tamanho das Audi√™ncias",
            labels={'x': 'Audi√™ncia', 'y': 'N√∫mero de Clientes'}
        )
        fig.update_xaxes(tickangle=45)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Status de uso das audi√™ncias
        used_count = sum(1 for aud in audiences if aud.last_extracted_at)
        unused_count = len(audiences) - used_count
        
        fig = px.pie(
            values=[used_count, unused_count],
            names=['J√° extra√≠das', 'Nunca extra√≠das'],
            title="Status de Uso das Audi√™ncias"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Tabela detalhada
    st.subheader("üìã Detalhes das Audi√™ncias")
    
    audience_data = []
    for aud in audiences:
        audience_data.append({
            'Nome': aud.name,
            'Clientes': aud.customer_count,
            'Criada em': aud.created_at[:10],
            '√öltima extra√ß√£o': aud.last_extracted_at[:10] if aud.last_extracted_at else 'Nunca',
            'Criado por': aud.created_by
        })
    
    df = pd.DataFrame(audience_data)
    st.dataframe(df, use_container_width=True)

def show_audience_tools(audience_service: AudienceService):
    """Exibe ferramentas para audi√™ncias"""
    st.subheader("üîß Ferramentas de Audi√™ncia")
    
    # Ferramenta 1: Atualiza√ß√£o em lote
    with st.expander("üîÑ Atualizar Todas as Audi√™ncias"):
        st.write("Atualiza a contagem de clientes de todas as audi√™ncias ativas.")
        
        if st.button("üîÑ Executar Atualiza√ß√£o em Lote"):
            audiences = audience_service.get_all_audiences()
            
            if not audiences:
                st.info("Nenhuma audi√™ncia para atualizar.")
            else:
                def refresh_audience(audience):
                    return audience_service.refresh_audience_count(audience.id)
                
                def on_success():
                    mark_for_refresh("audiences")
                    force_refresh_with_message("Todas as audi√™ncias foram atualizadas!", delay=1.0)
                
                success_count, error_count, total = batch_operation_progress(
                    items=audiences,
                    operation=refresh_audience,
                    operation_name="Atualizando",
                    success_callback=on_success
                )
    
    # Ferramenta 2: Exporta√ß√£o em lote
    with st.expander("üì§ Exporta√ß√£o em Lote"):
        st.write("Extrai e baixa dados de m√∫ltiplas audi√™ncias de uma vez.")
        
        audiences = audience_service.get_all_audiences()
        if audiences:
            selected_audiences = st.multiselect(
                "Selecione as audi√™ncias para exportar:",
                options=[aud.id for aud in audiences],
                format_func=lambda x: next(aud.name for aud in audiences if aud.id == x)
            )
            
            if selected_audiences and st.button("üì§ Exportar Selecionadas"):
                results = []
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for i, audience_id in enumerate(selected_audiences):
                    audience = next(aud for aud in audiences if aud.id == audience_id)
                    status_text.text(f"Extraindo {audience.name}...")
                    
                    result = audience_service.extract_audience_customers(audience_id)
                    if result:
                        results.append(result)
                    
                    progress_bar.progress((i + 1) / len(selected_audiences))
                
                progress_bar.empty()
                status_text.empty()
                
                if results:
                    st.success(f"‚úÖ {len(results)} audi√™ncias extra√≠das!")
                    
                    # Oferecer downloads individuais
                    for result in results:
                        st.download_button(
                            label=f"üíæ Baixar {result.audience_name} ({result.total_customers} clientes)",
                            data=result.csv_data,
                            file_name=f"audiencia_{result.audience_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv",
                            key=f"bulk_download_{result.audience_id}"
                        )
        else:
            st.info("Nenhuma audi√™ncia dispon√≠vel para exporta√ß√£o.")
    
    # Ferramenta 3: An√°lise de sobreposi√ß√£o
    with st.expander("üîç An√°lise de Sobreposi√ß√£o"):
        st.write("Analisa quantos clientes aparecem em m√∫ltiplas audi√™ncias.")
        
        audiences = audience_service.get_all_audiences()
        if len(audiences) >= 2:
            aud1_id = st.selectbox(
                "Primeira audi√™ncia:",
                options=[aud.id for aud in audiences],
                format_func=lambda x: next(aud.name for aud in audiences if aud.id == x),
                key="overlap_aud1"
            )
            
            aud2_id = st.selectbox(
                "Segunda audi√™ncia:",
                options=[aud.id for aud in audiences if aud.id != aud1_id],
                format_func=lambda x: next(aud.name for aud in audiences if aud.id == x),
                key="overlap_aud2"
            )
            
            if st.button("üîç Analisar Sobreposi√ß√£o"):
                with st.spinner("Analisando sobreposi√ß√£o..."):
                    aud1 = audience_service.get_audience(aud1_id)
                    aud2 = audience_service.get_audience(aud2_id)
                    
                    customers1 = audience_service._get_customers_by_criteria(aud1.criteria)
                    customers2 = audience_service._get_customers_by_criteria(aud2.criteria)
                    
                    ids1 = set(c.id for c in customers1)
                    ids2 = set(c.id for c in customers2)
                    
                    overlap_ids = ids1.intersection(ids2)
                    
                    # Salvar resultados no session_state para permitir downloads
                    st.session_state.overlap_analysis = {
                        'aud1_name': aud1.name,
                        'aud2_name': aud2.name,
                        'customers1': customers1,
                        'customers2': customers2,
                        'overlap_ids': overlap_ids,
                        'ids1': ids1,
                        'ids2': ids2
                    }
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric(f"{aud1.name}", len(ids1))
                    with col2:
                        st.metric(f"{aud2.name}", len(ids2))
                    with col3:
                        st.metric("Sobreposi√ß√£o", len(overlap_ids))
                    
                    if len(overlap_ids) > 0:
                        overlap_rate = len(overlap_ids) / len(ids1.union(ids2)) * 100
                        st.info(f"üìä Taxa de sobreposi√ß√£o: {overlap_rate:.1f}%")
                    else:
                        st.info("üìä N√£o h√° sobreposi√ß√£o entre essas audi√™ncias.")
            
            # Mostrar op√ß√µes de download se an√°lise foi feita
            if 'overlap_analysis' in st.session_state:
                st.subheader("üì§ Op√ß√µes de Extra√ß√£o")
                
                analysis = st.session_state.overlap_analysis
                aud1_name = analysis['aud1_name']
                aud2_name = analysis['aud2_name']
                customers1 = analysis['customers1']
                customers2 = analysis['customers2']
                overlap_ids = analysis['overlap_ids']
                ids1 = analysis['ids1']
                ids2 = analysis['ids2']
                
                if len(overlap_ids) > 0:
                    col_extract1, col_extract2, col_extract3 = st.columns(3)
                    
                    with col_extract1:
                        # Extrair sobreposi√ß√£o
                        overlap_customers = [c for c in customers1 if c.id in overlap_ids]
                        if overlap_customers:
                            csv_data = audience_service._generate_audience_csv(overlap_customers)
                            st.download_button(
                                label=f"üì• Baixar Sobreposi√ß√£o ({len(overlap_customers)})",
                                data=csv_data,
                                file_name=f"sobreposicao_{aud1_name.replace(' ', '_')}_{aud2_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv",
                                key="download_overlap_unique"
                            )
                    
                    with col_extract2:
                        # Extrair exclusivos da primeira audi√™ncia
                        exclusive1_ids = ids1 - ids2
                        exclusive1_customers = [c for c in customers1 if c.id in exclusive1_ids]
                        if exclusive1_customers:
                            csv_data = audience_service._generate_audience_csv(exclusive1_customers)
                            st.download_button(
                                label=f"üì• Exclusivos {aud1_name} ({len(exclusive1_customers)})",
                                data=csv_data,
                                file_name=f"exclusivos_{aud1_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv",
                                key="download_exclusive1_unique"
                            )
                        else:
                            st.info("Nenhum cliente exclusivo na primeira audi√™ncia")
                    
                    with col_extract3:
                        # Extrair exclusivos da segunda audi√™ncia
                        exclusive2_ids = ids2 - ids1
                        exclusive2_customers = [c for c in customers2 if c.id in exclusive2_ids]
                        if exclusive2_customers:
                            csv_data = audience_service._generate_audience_csv(exclusive2_customers)
                            st.download_button(
                                label=f"üì• Exclusivos {aud2_name} ({len(exclusive2_customers)})",
                                data=csv_data,
                                file_name=f"exclusivos_{aud2_name.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv",
                                key="download_exclusive2_unique"
                            )
                        else:
                            st.info("Nenhum cliente exclusivo na segunda audi√™ncia")
                
                # Mostrar preview dos clientes sobrepostos se houver
                if len(overlap_ids) > 0:
                    st.subheader("üëÄ Preview dos Clientes Sobrepostos")
                    
                    overlap_customers = [c for c in customers1 if c.id in overlap_ids]
                    preview_limit = min(10, len(overlap_customers))
                    
                    preview_data = []
                    for customer in overlap_customers[:preview_limit]:
                        preview_data.append({
                            'Nome': customer.data.nome or 'N/A',
                            'Email': customer.data.email or 'N/A',
                            'Documento': customer.data.documento or 'N/A',
                            'Cidade': customer.data.cidade or 'N/A',
                            'Estado': customer.data.estado or 'N/A'
                        })
                    
                    if preview_data:
                        df_preview = pd.DataFrame(preview_data)
                        st.dataframe(df_preview, use_container_width=True)
                        
                        if len(overlap_customers) > preview_limit:
                            st.info(f"Mostrando {preview_limit} de {len(overlap_customers)} clientes sobrepostos. Baixe o CSV para ver todos.")
                
                # Gr√°fico visual da sobreposi√ß√£o
                if len(overlap_ids) > 0:
                    st.subheader("üìä Visualiza√ß√£o da Sobreposi√ß√£o")
                    
                    # Criar dados para gr√°fico de Venn simplificado
                    exclusive1 = len(ids1 - ids2)
                    exclusive2 = len(ids2 - ids1)
                    overlap = len(overlap_ids)
                    
                    venn_data = {
                        'Categoria': [f'Exclusivos {aud1_name}', 'Sobreposi√ß√£o', f'Exclusivos {aud2_name}'],
                        'Quantidade': [exclusive1, overlap, exclusive2],
                        'Cor': ['#ff7f0e', '#2ca02c', '#1f77b4']
                    }
                    
                    fig = px.bar(
                        x=venn_data['Categoria'],
                        y=venn_data['Quantidade'],
                        color=venn_data['Categoria'],
                        title=f"Distribui√ß√£o de Clientes: {aud1_name} vs {aud2_name}",
                        labels={'x': 'Categoria', 'y': 'N√∫mero de Clientes'},
                        color_discrete_sequence=venn_data['Cor']
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                # Bot√£o para limpar an√°lise
                if st.button("üßπ Limpar An√°lise", key="clear_overlap_analysis"):
                    del st.session_state.overlap_analysis
                    st.rerun()
        
        else:
            st.info("S√£o necess√°rias pelo menos 2 audi√™ncias para an√°lise de sobreposi√ß√£o.")

def _get_criteria_summary(criteria) -> list:
    """Gera resumo dos crit√©rios de uma audi√™ncia"""
    summary = []
    criteria_dict = criteria.to_dict()
    
    for key, value in criteria_dict.items():
        if value is not None:
            # Traduzir nomes dos campos com tratamento de tipos
            try:
                if key == 'nome_contains':
                    summary.append(f'Nome cont√©m "{value}"')
                elif key == 'email_contains':
                    summary.append(f'Email cont√©m "{value}"')
                elif key == 'documento_equals':
                    summary.append(f'Documento = {value}')
                elif key == 'telefone_contains':
                    summary.append(f'Telefone cont√©m "{value}"')
                elif key == 'cidade_equals':
                    summary.append(f'Cidade = {value}')
                elif key == 'estado_equals':
                    summary.append(f'Estado = {value}')
                elif key == 'cep_starts_with':
                    summary.append(f'CEP inicia com {value}')
                elif key == 'profissao_contains':
                    summary.append(f'Profiss√£o cont√©m "{value}"')
                elif key == 'aniversariantes_mes':
                    summary.append(f'Aniversariantes de {_get_month_name(value)}')
                elif key == 'confidence_score_min':
                    summary.append(f'Confian√ßa ‚â• {value}')
                elif key == 'confidence_score_max':
                    summary.append(f'Confian√ßa ‚â§ {value}')
                elif key == 'has_email':
                    summary.append(f'{"Tem" if value else "N√£o tem"} email')
                elif key == 'has_telefone':
                    summary.append(f'{"Tem" if value else "N√£o tem"} telefone')
                elif key == 'has_endereco':
                    summary.append(f'{"Tem" if value else "N√£o tem"} endere√ßo')
                elif key == 'sources_include' and isinstance(value, list):
                    summary.append(f'Inclui fontes: {", ".join(value)}')
                elif key == 'sources_exclude' and isinstance(value, list):
                    summary.append(f'Exclui fontes: {", ".join(value)}')
                elif key == 'updated_in_last_days':
                    summary.append(f'Atualizado nos √∫ltimos {value} dias')
                elif key == 'data_nascimento_from':
                    summary.append(f'Nascimento desde {value}')
                elif key == 'data_nascimento_to':
                    summary.append(f'Nascimento at√© {value}')
                elif key == 'created_from':
                    summary.append(f'Cadastrado desde {value}')
                elif key == 'created_to':
                    summary.append(f'Cadastrado at√© {value}')
                elif key == 'has_history':
                    summary.append(f'{"Tem" if value else "N√£o tem"} hist√≥rico')
            except Exception as e:
                # Em caso de erro, apenas adiciona o campo sem formata√ß√£o especial
                summary.append(f'{key}: {value}')
    
    return summary[:5]  # Mostrar apenas os primeiros 5 crit√©rios

def _get_month_name(month_number: int) -> str:
    """Retorna o nome do m√™s em portugu√™s"""
    meses = {
        1: "Janeiro", 2: "Fevereiro", 3: "Mar√ßo", 4: "Abril",
        5: "Maio", 6: "Junho", 7: "Julho", 8: "Agosto",
        9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
    }
    return meses.get(month_number, "M√™s inv√°lido")