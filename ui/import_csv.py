# ui/import_csv.py
"""
P√°ginas para importa√ß√£o de clientes via CSV
"""

import streamlit as st
import pandas as pd
import json
import plotly.express as px
from datetime import datetime
from core.cdp import CustomerDataPlatform
from services.import_service import ImportService
from config import CSV_MAX_PREVIEW_ROWS, DATA_SOURCES

def show_import_csv(cdp: CustomerDataPlatform):
    """Exibe as p√°ginas de importa√ß√£o CSV"""
    st.header("üìÅ Importar Clientes via CSV")
    
    # Inicializar estado da importa√ß√£o se n√£o existir
    if 'import_step' not in st.session_state:
        st.session_state.import_step = 'upload'
    if 'import_data' not in st.session_state:
        st.session_state.import_data = None
    if 'import_results' not in st.session_state:
        st.session_state.import_results = None
    
    # Inicializar servi√ßo de importa√ß√£o
    import_service = ImportService(cdp)
    
    # Step 1: Upload do arquivo
    if st.session_state.import_step == 'upload':
        show_csv_upload(import_service)
    
    # Step 2: Confirma√ß√£o dos dados
    elif st.session_state.import_step == 'confirm':
        show_csv_confirmation(import_service)
    
    # Step 3: Resultados da importa√ß√£o
    elif st.session_state.import_step == 'results':
        show_import_results()

def show_csv_upload(import_service: ImportService):
    """Exibe tela de upload do CSV"""
    st.subheader("1Ô∏è‚É£ Upload do Arquivo CSV")
    
    # Instru√ß√µes e template
    with st.expander("üìñ Instru√ß√µes de Formato"):
        st.markdown("""
        **Colunas aceitas no CSV (todas opcionais):**
        - `nome` - Nome completo do cliente
        - `email` - Endere√ßo de email
        - `documento` - CPF/CNPJ (apenas n√∫meros)
        - `telefone` - N√∫mero de telefone
        - `endereco` - Endere√ßo completo
        - `cidade` - Cidade
        - `estado` - Estado/UF
        - `cep` - C√≥digo postal
        - `data_nascimento` - Data no formato YYYY-MM-DD
        - `profissao` - Profiss√£o/ocupa√ß√£o
        
        **Notas importantes:**
        - O arquivo deve ter cabe√ßalho (primeira linha com nomes das colunas)
        - Separador: v√≠rgula (,)
        - Codifica√ß√£o: UTF-8
        - Pelo menos uma coluna deve estar preenchida
        """)
        
        # Template para download
        csv_template = import_service.create_template_csv()
        st.download_button(
            label="üì• Baixar Template CSV",
            data=csv_template,
            file_name="template_clientes.csv",
            mime="text/csv"
        )
    
    # Upload do arquivo
    uploaded_file = st.file_uploader(
        "Escolha o arquivo CSV",
        type=['csv'],
        help="Arquivo CSV com dados dos clientes"
    )
    
    if uploaded_file is not None:
        try:
            # Ler o arquivo CSV
            df = pd.read_csv(uploaded_file)
            
            # Validar dados
            validation = import_service.validate_csv_data(df)
            
            if not validation['is_valid']:
                for error in validation['errors']:
                    st.error(f"‚ùå {error}")
                return
            
            # Mostrar preview dos dados
            st.success(f"‚úÖ Arquivo carregado com sucesso! {len(df)} registros encontrados.")
            
            st.subheader("üëÄ Preview dos Dados")
            preview_rows = min(CSV_MAX_PREVIEW_ROWS, len(df))
            st.dataframe(df.head(preview_rows), use_container_width=True)
            
            if len(df) > preview_rows:
                st.info(f"Mostrando apenas os primeiros {preview_rows} registros. Total: {len(df)} registros.")
            
            # An√°lise das colunas
            st.subheader("üìä An√°lise das Colunas")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Colunas encontradas:**")
                for col in validation['recognized_columns']:
                    st.write(f"‚úÖ {col}")
                for col in validation['ignored_columns']:
                    st.write(f"‚ö†Ô∏è {col} (ser√° ignorada)")
            
            with col2:
                st.write("**Estat√≠sticas:**")
                for col, stats in validation['statistics'].items():
                    st.write(f"- {col}: {stats['filled']}/{stats['total']} ({stats['percentage']:.1f}%)")
            
            # Mostrar avisos
            if validation['warnings']:
                st.warning("‚ö†Ô∏è Avisos encontrados:")
                for warning in validation['warnings']:
                    st.write(f"- {warning}")
            
            # Configura√ß√µes de importa√ß√£o
            st.subheader("‚öôÔ∏è Configura√ß√µes de Importa√ß√£o")
            
            col1, col2 = st.columns(2)
            
            with col1:
                source = st.selectbox("Fonte dos dados:", DATA_SOURCES)
            
            with col2:
                force_merge = st.checkbox(
                    "For√ßar merge em conflitos",
                    help="Se marcado, conflitos ser√£o resolvidos automaticamente"
                )
            
            # Bot√£o para avan√ßar
            if st.button("‚û°Ô∏è Avan√ßar para Confirma√ß√£o", type="primary"):
                # Processar dados
                processed_data = import_service.process_csv_data(df)
                
                # Salvar dados processados no estado da sess√£o
                st.session_state.import_data = {
                    'customers': processed_data,
                    'source': source,
                    'force_merge': force_merge,
                    'original_count': len(df),
                    'processed_count': len(processed_data)
                }
                
                st.session_state.import_step = 'confirm'
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå Erro ao processar arquivo: {str(e)}")

def show_csv_confirmation(import_service: ImportService):
    """Exibe tela de confirma√ß√£o dos dados"""
    st.subheader("2Ô∏è‚É£ Confirma√ß√£o dos Dados")
    
    if not st.session_state.import_data:
        st.error("Dados de importa√ß√£o n√£o encontrados!")
        if st.button("üîô Voltar ao Upload"):
            st.session_state.import_step = 'upload'
            st.rerun()
        return
    
    data = st.session_state.import_data
    customers = data['customers']
    
    # Resumo da importa√ß√£o
    st.info(f"""
    **Resumo da Importa√ß√£o:**
    - Registros no arquivo: {data['original_count']}
    - Registros v√°lidos para importa√ß√£o: {data['processed_count']}
    - Fonte: {data['source']}
    - For√ßar merge: {'Sim' if data['force_merge'] else 'N√£o'}
    """)
    
    # Preview dos dados processados
    st.subheader("üëÄ Preview dos Dados Processados")
    
    if customers:
        # Converter para DataFrame para melhor visualiza√ß√£o
        preview_data = []
        for i, customer in enumerate(customers[:CSV_MAX_PREVIEW_ROWS]):
            row = {'#': i + 1}
            row.update(customer)
            preview_data.append(row)
        
        preview_df = pd.DataFrame(preview_data)
        st.dataframe(preview_df, use_container_width=True)
        
        if len(customers) > CSV_MAX_PREVIEW_ROWS:
            st.info(f"Mostrando apenas os primeiros {CSV_MAX_PREVIEW_ROWS} registros. Total a importar: {len(customers)}")
    
    # An√°lise de conflitos potenciais
    with st.spinner("üîç Analisando conflitos potenciais..."):
        conflicts_analysis = import_service.analyze_potential_conflicts(customers)
    
    if conflicts_analysis['potential_conflicts'] > 0:
        st.warning(f"‚ö†Ô∏è {conflicts_analysis['potential_conflicts']} conflito(s) potencial(is) detectado(s)")
        
        with st.expander("Ver detalhes dos conflitos"):
            for conflict in conflicts_analysis['details']:
                st.write(f"- **Linha {conflict['row']}**: {conflict['reason']}")
    else:
        st.success("‚úÖ Nenhum conflito potencial detectado!")
    
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîô Voltar ao Upload"):
            st.session_state.import_step = 'upload'
            st.session_state.import_data = None
            st.rerun()
    
    with col2:
        if st.button("‚ùå Cancelar Importa√ß√£o"):
            st.session_state.import_step = 'upload'
            st.session_state.import_data = None
            st.session_state.import_results = None
            st.rerun()
    
    with col3:
        if st.button("‚úÖ Confirmar Importa√ß√£o", type="primary"):
            # Executar importa√ß√£o
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def progress_callback(progress, message):
                progress_bar.progress(progress)
                status_text.text(message)
            
            with st.spinner("üì§ Importando clientes..."):
                results = import_service.execute_import(
                    customers, 
                    data['source'], 
                    data['force_merge'],
                    progress_callback
                )
            
            progress_bar.empty()
            status_text.empty()
            
            st.session_state.import_results = results
            st.session_state.import_step = 'results'
            st.rerun()

def show_import_results():
    """Exibe tela de resultados da importa√ß√£o"""
    st.subheader("3Ô∏è‚É£ Resultados da Importa√ß√£o")
    
    if not st.session_state.import_results:
        st.error("Resultados da importa√ß√£o n√£o encontrados!")
        return
    
    results = st.session_state.import_results
    
    # Resumo dos resultados
    st.success("üéâ Importa√ß√£o conclu√≠da!")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("Total Processado", results.total_processed)
    with col2:
        st.metric("Criados", results.created, delta=results.created)
    with col3:
        st.metric("Atualizados", results.updated, delta=results.updated)
    with col4:
        st.metric("Conflitos", results.conflicts, delta=-results.conflicts if results.conflicts > 0 else None)
    with col5:
        st.metric("Erros", results.errors, delta=-results.errors if results.errors > 0 else None)
    
    # Gr√°fico de resultados
    if results.total_processed > 0:
        fig = px.pie(
            values=[results.created, results.updated, results.conflicts, results.errors],
            names=['Criados', 'Atualizados', 'Conflitos', 'Erros'],
            title="Distribui√ß√£o dos Resultados da Importa√ß√£o"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Detalhes por status
    if results.details:
        st.subheader("üìù Detalhes da Importa√ß√£o")
        
        # Filtros
        status_filter = st.selectbox(
            "Filtrar por status:",
            ["Todos", "created", "updated", "conflict_detected", "error"]
        )
        
        # Filtrar dados
        filtered_details = results.details
        if status_filter != "Todos":
            filtered_details = [d for d in results.details if d['status'] == status_filter]
        
        # Mostrar tabela
        if filtered_details:
            details_df = pd.DataFrame(filtered_details)
            
            # Mapear status para s√≠mbolos
            status_map = {
                'created': '‚úÖ Criado',
                'updated': 'üîÑ Atualizado',
                'conflict_detected': '‚ö†Ô∏è Conflito',
                'error': '‚ùå Erro'
            }
            
            details_df['Status'] = details_df['status'].map(status_map)
            details_df = details_df[['row', 'customer', 'Status', 'message']]
            details_df.columns = ['Linha', 'Cliente', 'Status', 'Mensagem']
            
            st.dataframe(details_df, use_container_width=True)
        else:
            st.info("Nenhum registro encontrado para o filtro selecionado.")
    
    # Bot√µes de a√ß√£o
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÅ Nova Importa√ß√£o"):
            st.session_state.import_step = 'upload'
            st.session_state.import_data = None
            st.session_state.import_results = None
            st.rerun()
    
    with col2:
        # Download do relat√≥rio
        report_data = {
            'resumo': {
                'total_processado': results.total_processed,
                'criados': results.created,
                'atualizados': results.updated,
                'conflitos': results.conflicts,
                'erros': results.errors
            },
            'detalhes': results.details
        }
        
        report_json = json.dumps(report_data, indent=2, ensure_ascii=False)
        st.download_button(
            label="üì• Baixar Relat√≥rio JSON",
            data=report_json,
            file_name=f"relatorio_importacao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )